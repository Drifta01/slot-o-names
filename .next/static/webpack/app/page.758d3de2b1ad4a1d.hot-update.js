"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/hooks/useSlotMachine.ts":
/*!*************************************!*\
  !*** ./app/hooks/useSlotMachine.ts ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSlotMachine: function() { return /* binding */ useSlotMachine; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../node_modules/.pnpm/next@14.2.30_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* __next_internal_client_entry_do_not_use__ useSlotMachine auto */ \nfunction useSlotMachine() {\n    const [names, setNames] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [gameMode, setGameMode] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"single\");\n    const [isSpinning, setIsSpinning] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [lastWinner, setLastWinner] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [lastWinners, setLastWinners] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [gridValues, setGridValues] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(Array(9).fill(\"???\"));\n    const [winnerText, setWinnerText] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\\uD83C\\uDFB0 Ready to Play!\");\n    const [resultData, setResultData] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        show: false,\n        type: \"single\",\n        message: \"\"\n    });\n    // Update grid display when names change\n    const updateGridDisplay = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((nameList)=>{\n        if (nameList.length === 0) {\n            setGridValues(Array(9).fill(\"???\"));\n            return;\n        }\n        // Fill grid with random names\n        const newGrid = Array(9).fill(\"\").map(()=>{\n            const randomName = nameList[Math.floor(Math.random() * nameList.length)];\n            return randomName;\n        });\n        setGridValues(newGrid);\n    }, []);\n    // Add default names on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const defaultNames = [\n            \"Alice\",\n            \"Bob\",\n            \"Charlie\",\n            \"Diana\",\n            \"Eve\",\n            \"Frank\"\n        ];\n        setNames(defaultNames);\n        updateGridDisplay(defaultNames);\n        setWinnerText(\"\\uD83C\\uDFB0 Ready to Play!\");\n    }, [\n        updateGridDisplay\n    ]);\n    // Add name\n    const addName = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((name)=>{\n        const trimmedName = name.trim();\n        if (trimmedName && !names.includes(trimmedName)) {\n            const newNames = [\n                ...names,\n                trimmedName\n            ];\n            setNames(newNames);\n            updateGridDisplay(newNames);\n            setWinnerText(\"Ready to play!\");\n            return true;\n        }\n        return false;\n    }, [\n        names,\n        updateGridDisplay\n    ]);\n    // Remove name\n    const removeName = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((nameToRemove)=>{\n        const newNames = names.filter((name)=>name !== nameToRemove);\n        setNames(newNames);\n        updateGridDisplay(newNames);\n    }, [\n        names,\n        updateGridDisplay\n    ]);\n    // Clear all names\n    const clearNames = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        setNames([]);\n        setLastWinner(null);\n        setLastWinners([]);\n        setGridValues(Array(9).fill(\"???\"));\n        setWinnerText(\"Add names to play!\");\n        setResultData({\n            show: false,\n            type: \"single\",\n            message: \"\"\n        });\n    }, []);\n    // Remove winner\n    const removeWinner = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (gameMode === \"single\" && lastWinner) {\n            removeName(lastWinner);\n            setLastWinner(null);\n            setWinnerText(\"Ready to play!\");\n            setResultData({\n                show: false,\n                type: \"single\",\n                message: \"\"\n            });\n        } else if (gameMode === \"triple\" && lastWinners.length > 0) {\n            lastWinners.forEach((winner)=>removeName(winner));\n            setLastWinners([]);\n            setWinnerText(\"Ready to play!\");\n            setResultData({\n                show: false,\n                type: \"single\",\n                message: \"\"\n            });\n        }\n    }, [\n        gameMode,\n        lastWinner,\n        lastWinners,\n        removeName\n    ]);\n    // Play sound effect\n    const playSound = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(frequencies, volumes) {\n        let duration = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0.5;\n        try {\n            const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n            frequencies.forEach((freq, index)=>{\n                const oscillator = audioContext.createOscillator();\n                const gainNode = audioContext.createGain();\n                oscillator.connect(gainNode);\n                gainNode.connect(audioContext.destination);\n                oscillator.frequency.value = freq;\n                oscillator.type = \"sine\";\n                gainNode.gain.setValueAtTime(0, audioContext.currentTime);\n                gainNode.gain.linearRampToValueAtTime(volumes[index] || 0.1, audioContext.currentTime + 0.1);\n                gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);\n                oscillator.start(audioContext.currentTime);\n                oscillator.stop(audioContext.currentTime + duration);\n            });\n        } catch (e) {\n        // Silently fail if audio context is not available\n        }\n    }, []);\n    // Check winning patterns\n    const checkWinningPatterns = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((winners)=>{\n        const patterns = {\n            jackpot: false,\n            line: false,\n            winningName: null,\n            lineWinners: []\n        };\n        // Only check the center row (middle horizontal line: cells 3, 4, 5)\n        const centerRow = [\n            3,\n            4,\n            5\n        ];\n        const [a, b, c] = centerRow;\n        if (winners[a] === winners[b] && winners[b] === winners[c] && winners[a] !== \"???\") {\n            patterns.line = true;\n            patterns.lineWinners = [\n                winners[a],\n                winners[b],\n                winners[c]\n            ];\n            patterns.winningName = winners[a];\n            patterns.jackpot = true // If all three in center row match, it's a jackpot\n            ;\n        }\n        return patterns;\n    }, []);\n    // Check for win\n    const checkForWin = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((winners)=>{\n        if (gameMode === \"single\") {\n            // Single winner mode - center cell (index 4) determines the winner\n            const winner = winners[4];\n            const patterns = checkWinningPatterns(winners);\n            if (patterns.jackpot) {\n                setLastWinner(winner);\n                setWinnerText(\"\\uD83C\\uDFB0 JACKPOT! \\uD83C\\uDFB0\");\n                setResultData({\n                    show: true,\n                    type: \"jackpot\",\n                    winner,\n                    message: \"Center cell winner!\"\n                });\n                // Play jackpot sound\n                const notes = [\n                    261,\n                    329,\n                    392,\n                    523,\n                    659,\n                    784,\n                    1047\n                ];\n                notes.forEach((freq, index)=>{\n                    setTimeout(()=>{\n                        playSound([\n                            freq\n                        ], [\n                            0.3\n                        ], 0.3);\n                    }, index * 200);\n                });\n            } else {\n                setLastWinner(winner);\n                setWinnerText(\"\\uD83C\\uDFAF Winner: \".concat(winner));\n                setResultData({\n                    show: true,\n                    type: \"single\",\n                    winner,\n                    message: \"Selected from the center cell!\"\n                });\n                playSound([\n                    523,\n                    659,\n                    784\n                ], [\n                    0.2,\n                    0.2,\n                    0.2\n                ], 0.5);\n            }\n        } else {\n            // Triple winners mode - check for center row pattern only\n            const patterns = checkWinningPatterns(winners);\n            if (patterns.line) {\n                setLastWinners(patterns.lineWinners);\n                setWinnerText(\"\\uD83C\\uDFB0 Center Row Winners!\");\n                setResultData({\n                    show: true,\n                    type: \"tripleJackpot\",\n                    winners: patterns.lineWinners,\n                    message: \"All center row cells match! INCREDIBLE!\"\n                });\n                // Play jackpot sound\n                const notes = [\n                    261,\n                    329,\n                    392,\n                    523,\n                    659,\n                    784,\n                    1047\n                ];\n                notes.forEach((freq, index)=>{\n                    setTimeout(()=>{\n                        playSound([\n                            freq\n                        ], [\n                            0.3\n                        ], 0.3);\n                    }, index * 200);\n                });\n            } else {\n                // Show center winner as fallback\n                const winner = winners[4];\n                setLastWinner(winner);\n                setWinnerText(\"\\uD83C\\uDFAF Winner: \".concat(winner));\n                setResultData({\n                    show: true,\n                    type: \"single\",\n                    winner,\n                    message: \"Selected from the center cell!\"\n                });\n                playSound([\n                    523,\n                    659,\n                    784\n                ], [\n                    0.2,\n                    0.2,\n                    0.2\n                ], 0.5);\n            }\n        }\n    }, [\n        gameMode,\n        checkWinningPatterns,\n        playSound\n    ]);\n    // Animate cell during spin\n    const startCellAnimation = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (names.length === 0) return;\n        const animationInterval = setInterval(()=>{\n            if (!isSpinning) {\n                clearInterval(animationInterval);\n                return;\n            }\n            // Rapidly change the displayed names (faster for more realistic slot effect)\n            const newGrid = Array(9).fill(\"\").map(()=>{\n                const randomName = names[Math.floor(Math.random() * names.length)];\n                return randomName;\n            });\n            setGridValues(newGrid);\n        }, 50) // Changed from 100ms to 50ms for faster spinning effect\n        ;\n        return animationInterval;\n    }, [\n        names,\n        isSpinning\n    ]);\n    // Pull lever (start spinning)\n    const pullLever = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (isSpinning || names.length < 2) return;\n        setIsSpinning(true);\n        setWinnerText(\"\\uD83C\\uDFB0 Spinning...\");\n        setResultData({\n            show: false,\n            type: \"single\",\n            message: \"\"\n        });\n        // Play spinning sound\n        playSound([\n            200,\n            250,\n            300\n        ], [\n            0.1,\n            0.1,\n            0.1\n        ], 2);\n        // Start animation\n        const animationInterval = startCellAnimation();\n        // Stop spinning after delay\n        setTimeout(()=>{\n            setIsSpinning(false);\n            if (animationInterval) clearInterval(animationInterval);\n            // Set final values\n            const finalGrid = Array(9).fill(\"\").map(()=>{\n                if (names.length > 0) {\n                    const finalName = names[Math.floor(Math.random() * names.length)];\n                    return finalName;\n                }\n                return \"???\";\n            });\n            setGridValues(finalGrid);\n            // Check for win after a brief delay\n            setTimeout(()=>{\n                checkForWin(finalGrid);\n            }, 500);\n        }, 3000);\n    }, [\n        isSpinning,\n        names,\n        playSound,\n        startCellAnimation,\n        checkForWin\n    ]);\n    return {\n        names,\n        gameMode,\n        isSpinning,\n        lastWinner,\n        lastWinners,\n        gridValues,\n        winnerText,\n        resultData,\n        addName,\n        removeName,\n        clearNames,\n        removeWinner,\n        setGameMode,\n        pullLever\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/hooks/useSlotMachine.ts\n"));

/***/ })

});